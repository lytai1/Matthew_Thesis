from run_noddi import visualize_result
import dill
import os
import argparse

from dipy.data import get_sphere
import numpy as np
from dipy.viz import window, actor

import psutil

print(psutil.virtual_memory())
class Results():

    def __init__(self, model):

        self.model = model
        print("Generating volume image")
        self.volume_image = self.aquire_odi(model.fitted_parameters)
        print("Generating fods")
        self.fod = self.calculate_fod(model)
        print("Orientating fods")
        self.fod = self.orientate(self.fod)

    def aquire_odi(self, fitted_parameters):

        affine = np.eye(4)

        volume_res = fitted_parameters['SD1WatsonDistributed_1_SD1Watson_1_odi']
        volume_im = actor.slicer(volume_res[:, :, 0, None], interpolation='nearest', affine=affine, opacity=0.7)

        return volume_im

    def calculate_fod(self, model):

        sphere = get_sphere(name = 'symmetric724').subdivide()
        fods = model.fod(sphere.vertices, visual_odi_lower_bound = 0.08)

        fod_spheres = actor.odf_slicer(
            fods, sphere=sphere, scale=0.9, norm=False)
        fod_spheres.display_extent(0, fods.shape[0] - 1,
                                   0, fods.shape[1] - 1,
                                   0, fods.shape[2] - 1)

        return fod_spheres

    def orientate(self, fod_spheres):

        fod_spheres.RotateX(90)
        fod_spheres.RotateZ(180)
        fod_spheres.RotateY(180)

        return fod_spheres 

if __name__ == "__main__":

    parser = argparse.ArgumentParser(description="Takes a pickle file generated by the training of a model on the specific mri")
    parser.add_argument('--path', metavar='-p', type=str, help="The path to the location of the pickle file")
    # parser.add_argument('--name', metavar='-n', type=str, help="The name of the image to be saved")

    args = parser.parse_args()

    #try: 
    print("Loading model") 
    ## load the model 
    with open(args.path, "rb") as f:
        model = dill.load(f)

    ## generate the fod and resulting volume image 
    # try:
    print("Generating visualization parameters")
    result = Results(model)

    path, name = os.path.split(args.path)
    patient_num = os.path.splitext(name)
    results_path = os.path.join(path, patient_num+"_result.pkl") 
        
    print("Saving result class to file")
    with open(results_path, "wb") as f:
       dill.dump(result, f)
        # except:
            # print("failed visualizing the model")
   # except:
    #    print("failed loading the model")
